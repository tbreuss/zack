{% extends "base.html.twig" %}

{% block title %}
	{{ title }}
{% endblock %}

{% block hero %}
	<div class="hero">
		<div class="container">
			<div class="pure-g">
				<div class="pure-u-1">
					<h2 class="hero-heading">ZACK!</h2>
					<p class="hero-text">
            Sometimes you simply have to implement a project or an MVP quickly.
            Zack! with file-based routing to the rescue!
          </p>
					<p class="hero-button">
						<a href="/doc" class="pure-button hero-calltoaction">Go to documentation</a>
					</p>
				</div>
			</div>
		</div>
	</div>
{% endblock %}

{% block content %}
	<p>
    Zack! is a tiny little framework based on Symfony's <a href="https://symfony.com/doc/current/components/http_kernel.html">HttpKernel Component</a> using file-based routing, inspired by Javascript Libraries/Frameworks like <a href="https://nitro.build/guide/routing">Nitro</a>.
    It ships with the <a href="https://twig.symfony.com/">Twig</a> template engine and HTML, JSON, <a href="https://commonmark.thephpleague.com/">Markdown</a> and PHP route handler out of the box.
    It is a great fit for small projects, MVPs, or even as a microservice.
  </p>

	<h3>Supported PHP versions</h3>
  <p>PHP 8.2 / 8.3 / 8.4</p>

	<h3>Petstore 3 API</h3>
  <p>As an example, we have (more or less) implemented the endpoints of the <a href="https://petstore3.swagger.io/">Petstore 3</a> OpenAPI specification.</p>
	{% for category in apiRoutes %}
    <p style="margin: 1em 0 0.5em 0">
      <b style="margin-right: 0.5em">{{ category.name }}</b>
      <span style="font-size: 0.8em">{{ category.description }}</span>
    </p>
		{% for route in category.routes %}
			<div class="endpoint" data-url="{{ route.url }}" data-method="{{ route.method }}" data-body='{{ route.body|raw }}'>
				<div class="endpoint-link endpoint-link--{{ route.method|lower }}">
					<span class="endpoint-request-method">{{ route.method|upper }}</span>
					<span class="endpoint-request-name">{{ route.path }}</span>
					<span class="endpoint-request-description">{{ route.name }}</span>
				</div>
				<div class="endpoint-request-body"></div>
				<div class="endpoint-response-status"></div>
				<div class="endpoint-response-body"></div>
			</div>
		{% endfor %}
	{% endfor %}

{% endblock %}
